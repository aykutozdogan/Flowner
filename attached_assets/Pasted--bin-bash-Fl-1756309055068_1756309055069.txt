#!/bin/bash

# =============================================================================
# Flowner Detailed UI Test System
# Gerçek kullanıcı etkileşimleri, form submission, drag-drop, modal testleri
# =============================================================================

set -e

PROJECT_ROOT="."
LOG_DIR="./ui-test-logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
TEST_SESSION="ui_test_$TIMESTAMP"

# Renkli output için
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}🎭 Flowner Detailed UI Test System${NC}"
echo -e "${PURPLE}===================================${NC}"
echo ""

# Log dizinini oluştur
mkdir -p "$LOG_DIR"
cd "$LOG_DIR"

# Test session dosyası
TEST_LOG="$TEST_SESSION.log"
ERROR_LOG="$TEST_SESSION.errors.json"
PROMPT_FILE="$TEST_SESSION.prompt.md"
UI_RESULTS="$TEST_SESSION.ui_results.json"

echo -e "${YELLOW}🎬 UI Test Session: $TEST_SESSION${NC}"
echo -e "${YELLOW}📂 Test Directory: $LOG_DIR${NC}"
echo ""

# Initialize JSON files
echo "[]" > "$ERROR_LOG"
echo "[]" > "$UI_RESULTS"

# =============================================================================
# 1. PLAYWRIGHT KURULUM KONTROLÜ
# =============================================================================

echo -e "${BLUE}1️⃣ Playwright Setup Check${NC}" | tee -a "$TEST_LOG"
echo "===========================" | tee -a "$TEST_LOG"

# Playwright kurulumu kontrol et
if ! command -v npx > /dev/null; then
    echo -e "${RED}❌ npm/npx not found. Please install Node.js${NC}" | tee -a "$TEST_LOG"
    exit 1
fi

# Playwright package kontrolü
if ! npm list playwright > /dev/null 2>&1 && ! npm list -g playwright > /dev/null 2>&1; then
    echo -e "${YELLOW}⚠️ Playwright not installed. Installing...${NC}" | tee -a "$TEST_LOG"
    npm install -D playwright || {
        echo -e "${RED}❌ Failed to install Playwright${NC}" | tee -a "$TEST_LOG"
        exit 1
    }
fi

# Browser installation
if ! npx playwright --version > /dev/null 2>&1; then
    echo -e "${YELLOW}⚠️ Playwright browsers not installed. Installing...${NC}" | tee -a "$TEST_LOG"
    npx playwright install chromium || {
        echo -e "${RED}❌ Failed to install Playwright browsers${NC}" | tee -a "$TEST_LOG"
        exit 1
    }
fi

echo -e "${GREEN}✅ Playwright setup complete${NC}" | tee -a "$TEST_LOG"
echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 2. BACKEND HEALTH CHECK
# =============================================================================

echo -e "${BLUE}2️⃣ Backend Health Check${NC}" | tee -a "$TEST_LOG"
echo "========================" | tee -a "$TEST_LOG"

if curl -s http://localhost:5000/api/health > /dev/null 2>&1; then
    echo -e "${GREEN}✅ Backend running on port 5000${NC}" | tee -a "$TEST_LOG"
    BACKEND_STATUS="OK"
else
    echo -e "${RED}❌ Backend not running on port 5000${NC}" | tee -a "$TEST_LOG"
    echo -e "${RED}Please start the backend: npm run dev${NC}" | tee -a "$TEST_LOG"
    exit 1
fi

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 3. DETAYLI UI TEST SCRIPTING
# =============================================================================

echo -e "${BLUE}3️⃣ Creating Advanced UI Test Script${NC}" | tee -a "$TEST_LOG"
echo "====================================" | tee -a "$TEST_LOG"

# Advanced UI test script'i oluştur
cat > detailed_ui_test.js << 'EOF'
const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// Detailed UI Test Scenarios
const UI_TEST_SCENARIOS = [
  {
    id: 'admin_dashboard_overview',
    name: 'Admin Dashboard Overview & Navigation',
    role: 'admin',
    email: 'admin@demo.local',
    password: 'Passw0rd!',
    steps: [
      { type: 'login', expectedRedirect: '/admin/dashboard' },
      { type: 'screenshot', name: 'admin_dashboard_loaded' },
      { type: 'verify_elements', selectors: ['h1, h2, .dashboard-title', '.stats-card, .metric-card', 'nav, .sidebar'] },
      { type: 'click_navigation', menu: 'Forms', expectedPath: '/admin/forms' },
      { type: 'screenshot', name: 'admin_forms_page' },
      { type: 'click_navigation', menu: 'Workflows', expectedPath: '/admin/workflows' },
      { type: 'screenshot', name: 'admin_workflows_page' },
      { type: 'click_navigation', menu: 'Processes', expectedPath: '/admin/processes' },
      { type: 'screenshot', name: 'admin_processes_page' }
    ]
  },
  {
    id: 'admin_form_creation',
    name: 'Admin Form Builder - Create New Form',
    role: 'admin', 
    email: 'admin@demo.local',
    password: 'Passw0rd!',
    steps: [
      { type: 'login', expectedRedirect: '/admin/dashboard' },
      { type: 'navigate_to', path: '/admin/forms' },
      { type: 'screenshot', name: 'forms_list_page' },
      { type: 'click_button', text: ['Yeni Form', 'New Form', '+', 'Create Form', 'Add Form'] },
      { type: 'wait_for_modal', timeout: 3000 },
      { type: 'screenshot', name: 'new_form_modal' },
      { type: 'fill_field', name: 'name', value: 'UI Test Form ' + Date.now() },
      { type: 'fill_field', name: 'description', value: 'Automated UI test form creation' },
      { type: 'click_button', text: ['Kaydet', 'Save', 'Create'] },
      { type: 'wait_for_redirect', timeout: 5000 },
      { type: 'screenshot', name: 'form_created_success' },
      { type: 'verify_success_message' }
    ]
  },
  {
    id: 'admin_form_builder_interaction',
    name: 'Form Builder - Field Addition & Configuration',
    role: 'admin',
    email: 'admin@demo.local', 
    password: 'Passw0rd!',
    steps: [
      { type: 'login', expectedRedirect: '/admin/dashboard' },
      { type: 'navigate_to', path: '/admin/forms' },
      { type: 'click_first_form_edit' },
      { type: 'screenshot', name: 'form_builder_interface' },
      { type: 'verify_form_builder_elements' },
      { type: 'drag_field_from_palette', fieldType: 'text', targetArea: '.form-canvas, .drop-zone' },
      { type: 'screenshot', name: 'text_field_added' },
      { type: 'configure_field', label: 'Employee Name', required: true },
      { type: 'drag_field_from_palette', fieldType: 'number', targetArea: '.form-canvas, .drop-zone' },
      { type: 'configure_field', label: 'Amount', required: true, min: 0, max: 10000 },
      { type: 'screenshot', name: 'form_fields_configured' },
      { type: 'save_form_draft' }
    ]
  },
  {
    id: 'designer_workflow_creation',
    name: 'Designer BPMN Workflow Creation',
    role: 'designer',
    email: 'designer@demo.local',
    password: 'Designer123!', 
    steps: [
      { type: 'login', expectedRedirect: '/admin/dashboard' },
      { type: 'navigate_to', path: '/admin/workflows' },
      { type: 'screenshot', name: 'workflows_list_page' },
      { type: 'click_button', text: ['Yeni Workflow', 'New Workflow', '+', 'Create'] },
      { type: 'wait_for_modal', timeout: 3000 },
      { type: 'fill_field', name: 'name', value: 'UI Test Workflow ' + Date.now() },
      { type: 'fill_field', name: 'description', value: 'Automated UI test workflow' },
      { type: 'click_button', text: ['Oluştur', 'Create'] },
      { type: 'wait_for_bpmn_designer', timeout: 5000 },
      { type: 'screenshot', name: 'bpmn_designer_loaded' },
      { type: 'verify_bpmn_palette' },
      { type: 'add_bpmn_element', elementType: 'start-event', position: { x: 100, y: 100 } },
      { type: 'add_bpmn_element', elementType: 'user-task', position: { x: 300, y: 100 } },
      { type: 'add_bpmn_element', elementType: 'end-event', position: { x: 500, y: 100 } },
      { type: 'screenshot', name: 'bpmn_elements_added' },
      { type: 'save_workflow_draft' }
    ]
  },
  {
    id: 'user_task_interaction',
    name: 'User Task Completion Flow',
    role: 'user',
    email: 'user@demo.local',
    password: 'User123!',
    steps: [
      { type: 'login', expectedRedirect: '/portal/tasks' },
      { type: 'screenshot', name: 'user_portal_loaded' },
      { type: 'verify_elements', selectors: ['.task-list, .inbox', '.task-item, .task-card'] },
      { type: 'check_task_availability' },
      { type: 'click_first_available_task' },
      { type: 'screenshot', name: 'task_detail_page' },
      { type: 'verify_task_form' },
      { type: 'fill_task_form' },
      { type: 'screenshot', name: 'task_form_filled' },
      { type: 'submit_task_form' },
      { type: 'verify_task_completion' },
      { type: 'screenshot', name: 'task_completed' }
    ]
  },
  {
    id: 'responsive_ui_test',
    name: 'Responsive UI & Mobile View Test',
    role: 'admin',
    email: 'admin@demo.local',
    password: 'Passw0rd!',
    steps: [
      { type: 'login', expectedRedirect: '/admin/dashboard' },
      { type: 'set_viewport', width: 1920, height: 1080 },
      { type: 'screenshot', name: 'desktop_view' },
      { type: 'set_viewport', width: 768, height: 1024 },
      { type: 'screenshot', name: 'tablet_view' },
      { type: 'verify_responsive_navigation' },
      { type: 'set_viewport', width: 375, height: 667 },
      { type: 'screenshot', name: 'mobile_view' },
      { type: 'test_mobile_menu' },
      { type: 'set_viewport', width: 1920, height: 1080 }
    ]
  }
];

// Screenshot helper
let screenshotCounter = 0;

async function takeScreenshot(page, name, context = '') {
  screenshotCounter++;
  const filename = `${screenshotCounter.toString().padStart(3, '0')}_${name}_${context}.png`;
  await page.screenshot({ 
    path: filename, 
    fullPage: true,
    clip: null
  });
  return filename;
}

// Step execution functions
async function executeUIStep(step, page, context) {
  const startTime = Date.now();
  console.log(`      🔧 ${step.type}: ${JSON.stringify(step).substring(0, 100)}...`);
  
  try {
    switch (step.type) {
      case 'login':
        await page.goto('http://localhost:5000/login', { waitUntil: 'networkidle' });
        
        // Find email field with multiple selectors
        const emailSelectors = ['input[name="email"]', 'input[type="email"]', '#email', '[data-testid="email"]'];
        let emailField = null;
        for (const selector of emailSelectors) {
          emailField = page.locator(selector).first();
          if (await emailField.count() > 0) break;
        }
        if (!emailField || await emailField.count() === 0) {
          throw new Error('Email field not found');
        }
        
        // Find password field
        const passwordSelectors = ['input[name="password"]', 'input[type="password"]', '#password', '[data-testid="password"]'];
        let passwordField = null;
        for (const selector of passwordSelectors) {
          passwordField = page.locator(selector).first();
          if (await passwordField.count() > 0) break;
        }
        if (!passwordField || await passwordField.count() === 0) {
          throw new Error('Password field not found');
        }
        
        // Fill and submit
        await emailField.fill(context.email);
        await passwordField.fill(context.password);
        
        const submitSelectors = ['button[type="submit"]', 'input[type="submit"]', 'button:has-text("Giriş")', 'button:has-text("Login")'];
        let submitButton = null;
        for (const selector of submitSelectors) {
          submitButton = page.locator(selector).first();
          if (await submitButton.count() > 0) break;
        }
        if (submitButton && await submitButton.count() > 0) {
          await submitButton.click();
        } else {
          // Try form submission via Enter key
          await passwordField.press('Enter');
        }
        
        await page.waitForLoadState('networkidle', { timeout: 10000 });
        
        // Verify redirect
        if (step.expectedRedirect) {
          await page.waitForURL(url => url.includes(step.expectedRedirect), { timeout: 5000 });
        }
        break;
        
      case 'screenshot':
        await takeScreenshot(page, step.name, context.role);
        break;
        
      case 'navigate_to':
        await page.goto(`http://localhost:5000${step.path}`, { waitUntil: 'networkidle' });
        break;
        
      case 'verify_elements':
        for (const selector of step.selectors) {
          const elements = page.locator(selector);
          const count = await elements.count();
          if (count === 0) {
            console.log(`        ⚠️ Element not found: ${selector}`);
          } else {
            console.log(`        ✅ Found ${count} element(s): ${selector}`);
          }
        }
        break;
        
      case 'click_navigation':
        const navSelectors = [
          `nav a:has-text("${step.menu}")`,
          `.sidebar a:has-text("${step.menu}")`,
          `a[href*="${step.menu.toLowerCase()}"]`,
          `[data-testid="${step.menu.toLowerCase()}"]`
        ];
        
        let navClicked = false;
        for (const selector of navSelectors) {
          const navElement = page.locator(selector).first();
          if (await navElement.count() > 0) {
            await navElement.click();
            navClicked = true;
            break;
          }
        }
        
        if (!navClicked) {
          throw new Error(`Navigation menu not found: ${step.menu}`);
        }
        
        await page.waitForLoadState('networkidle');
        if (step.expectedPath) {
          await page.waitForURL(url => url.includes(step.expectedPath), { timeout: 5000 });
        }
        break;
        
      case 'click_button':
        let buttonClicked = false;
        for (const buttonText of step.text) {
          const buttonSelectors = [
            `button:has-text("${buttonText}")`,
            `input[value="${buttonText}"]`,
            `a:has-text("${buttonText}")`,
            `[data-testid="${buttonText.toLowerCase().replace(' ', '-')}"]`
          ];
          
          for (const selector of buttonSelectors) {
            const button = page.locator(selector).first();
            if (await button.count() > 0) {
              await button.click();
              buttonClicked = true;
              break;
            }
          }
          if (buttonClicked) break;
        }
        
        if (!buttonClicked) {
          throw new Error(`Button not found: ${step.text.join(' or ')}`);
        }
        break;
        
      case 'wait_for_modal':
        await page.waitForSelector('.modal, .dialog, [role="dialog"]', { timeout: step.timeout });
        break;
        
      case 'fill_field':
        const fieldSelectors = [
          `input[name="${step.name}"]`,
          `textarea[name="${step.name}"]`,
          `#${step.name}`,
          `[data-testid="${step.name}"]`,
          `input[placeholder*="${step.name}"]`
        ];
        
        let fieldFilled = false;
        for (const selector of fieldSelectors) {
          const field = page.locator(selector).first();
          if (await field.count() > 0) {
            await field.fill(step.value);
            fieldFilled = true;
            break;
          }
        }
        
        if (!fieldFilled) {
          throw new Error(`Field not found: ${step.name}`);
        }
        break;
        
      case 'wait_for_redirect':
        await page.waitForLoadState('networkidle', { timeout: step.timeout });
        break;
        
      case 'verify_success_message':
        const successSelectors = [
          '.alert-success',
          '.notification.success', 
          '.toast.success',
          '.message.success',
          '[data-testid="success"]'
        ];
        
        let successFound = false;
        for (const selector of successSelectors) {
          if (await page.locator(selector).count() > 0) {
            successFound = true;
            break;
          }
        }
        
        if (!successFound) {
          console.log('        ⚠️ Success message not found (may be expected)');
        }
        break;
        
      case 'set_viewport':
        await page.setViewportSize({ width: step.width, height: step.height });
        break;
        
      case 'verify_responsive_navigation':
        // Check if mobile menu toggle exists in tablet/mobile view
        const mobileMenuSelectors = ['.menu-toggle', '.hamburger', '[data-testid="mobile-menu"]'];
        for (const selector of mobileMenuSelectors) {
          if (await page.locator(selector).count() > 0) {
            console.log(`        ✅ Mobile menu found: ${selector}`);
            return;
          }
        }
        console.log('        ⚠️ Mobile menu not found');
        break;
        
      default:
        console.log(`        ⚠️ Unknown step type: ${step.type}`);
    }
    
    return {
      success: true,
      timing: Date.now() - startTime,
      message: `${step.type} completed successfully`
    };
    
  } catch (error) {
    return {
      success: false,
      timing: Date.now() - startTime,
      error: error.message
    };
  }
}

async function runDetailedUITests() {
  console.log('🎭 Starting Detailed UI Tests...\n');
  
  const browser = await chromium.launch({ 
    headless: false, // Show browser for debugging
    slowMo: 1000,    // Slow down for visibility
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'FlowerUITest/1.0',
    recordVideo: {
      dir: './test-videos/',
      size: { width: 1920, height: 1080 }
    }
  });
  
  const testResults = [];
  
  for (const scenario of UI_TEST_SCENARIOS) {
    console.log(`\n🎬 Running Scenario: ${scenario.name}`);
    console.log(`👤 Role: ${scenario.role} (${scenario.email})`);
    
    const page = await context.newPage();
    
    const scenarioResult = {
      id: scenario.id,
      name: scenario.name,
      role: scenario.role,
      steps: [],
      success: true,
      startTime: new Date().toISOString(),
      errors: []
    };
    
    // Setup error handlers
    page.on('console', msg => {
      if (msg.type() === 'error') {
        scenarioResult.errors.push({
          type: 'console_error',
          message: msg.text(),
          timestamp: new Date().toISOString()
        });
      }
    });
    
    page.on('pageerror', error => {
      scenarioResult.errors.push({
        type: 'page_error',
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });
    });
    
    // Execute all steps
    for (let i = 0; i < scenario.steps.length; i++) {
      const step = scenario.steps[i];
      console.log(`    📋 Step ${i + 1}/${scenario.steps.length}: ${step.type}`);
      
      const stepResult = await executeUIStep(step, page, scenario);
      scenarioResult.steps.push({
        index: i + 1,
        type: step.type,
        success: stepResult.success,
        timing: stepResult.timing,
        message: stepResult.message || stepResult.error
      });
      
      if (!stepResult.success) {
        console.log(`      ❌ Step failed: ${stepResult.error}`);
        scenarioResult.success = false;
        scenarioResult.errors.push({
          type: 'step_error',
          step: i + 1,
          stepType: step.type,
          message: stepResult.error,
          timestamp: new Date().toISOString()
        });
        
        // Take error screenshot
        await takeScreenshot(page, `error_step_${i + 1}`, scenario.role);
      } else {
        console.log(`      ✅ Step completed (${stepResult.timing}ms)`);
      }
      
      // Wait between steps
      await page.waitForTimeout(500);
    }
    
    scenarioResult.endTime = new Date().toISOString();
    scenarioResult.duration = scenarioResult.steps.reduce((sum, step) => sum + step.timing, 0);
    
    if (scenarioResult.success) {
      console.log(`  🎉 Scenario completed successfully (${scenarioResult.duration}ms)`);
    } else {
      console.log(`  ❌ Scenario failed with ${scenarioResult.errors.length} errors`);
    }
    
    await page.close();
    testResults.push(scenarioResult);
    
    // Wait between scenarios
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  await browser.close();
  
  // Generate summary
  const summary = {
    totalScenarios: testResults.length,
    successfulScenarios: testResults.filter(r => r.success).length,
    totalSteps: testResults.reduce((sum, r) => sum + r.steps.length, 0),
    successfulSteps: testResults.reduce((sum, r) => sum + r.steps.filter(s => s.success).length, 0),
    totalErrors: testResults.reduce((sum, r) => sum + r.errors.length, 0),
    totalDuration: testResults.reduce((sum, r) => sum + r.duration, 0),
    startTime: new Date().toISOString()
  };
  
  console.log(`\n📊 UI Test Summary:`);
  console.log(`   Scenarios: ${summary.successfulScenarios}/${summary.totalScenarios} passed`);
  console.log(`   Steps: ${summary.successfulSteps}/${summary.totalSteps} passed`);
  console.log(`   Errors: ${summary.totalErrors}`);
  console.log(`   Duration: ${Math.round(summary.totalDuration / 1000)}s`);
  
  // Save results
  fs.writeFileSync('ui_test_results.json', JSON.stringify(testResults, null, 2));
  fs.writeFileSync('ui_test_summary.json', JSON.stringify(summary, null, 2));
  
  return { testResults, summary };
}

// Main execution
runDetailedUITests().then(({ testResults, summary }) => {
  const success = summary.successfulScenarios === summary.totalScenarios && summary.totalErrors === 0;
  
  console.log(success ? '\n🎉 All UI tests passed!' : '\n❌ Some UI tests failed!');
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('\n💥 UI test runner failed:', error);
  process.exit(1);
});
EOF

echo -e "${GREEN}✅ Advanced UI test script created${NC}" | tee -a "$TEST_LOG"
echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 4. UI TESTLERINI ÇALIŞTIR
# =============================================================================

echo -e "${BLUE}4️⃣ Running Detailed UI Tests${NC}" | tee -a "$TEST_LOG"
echo "==============================" | tee -a "$TEST_LOG"

echo -e "${CYAN}🎬 Starting browser automation tests...${NC}" | tee -a "$TEST_LOG"
echo -e "${CYAN}This will take 5-10 minutes and open browsers${NC}" | tee -a "$TEST_LOG"
echo "" | tee -a "$TEST_LOG"

if node detailed_ui_test.js 2>&1 | tee -a "$TEST_LOG"; then
    echo -e "${GREEN}✅ Detailed UI tests completed successfully${NC}" | tee -a "$TEST_LOG"
    UI_TEST_STATUS="PASS"
    
    # UI test sonuçlarını kopyala
    if [[ -f "ui_test_results.json" ]]; then
        cp ui_test_results.json "$UI_RESULTS"
    fi
    
else
    echo -e "${RED}❌ Some UI tests failed${NC}" | tee -a "$TEST_LOG"
    UI_TEST_STATUS="FAIL"
    
    # Error'ları UI error log'a ekle
    echo '{"error": "UI test execution failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
fi

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 5. SONUÇ ANALİZİ VE RAPOR
# =============================================================================

echo -e "${BLUE}5️⃣ Test Results Analysis${NC}" | tee -a "$TEST_LOG"
echo "==========================" | tee -a "$TEST_LOG"

# UI test sonuçlarını analiz et
if [[ -f "ui_test_summary.json" ]]; then
    echo -e "${CYAN}📊 UI Test Summary:${NC}" | tee -a "$TEST_LOG"
    
    TOTAL_SCENARIOS=$(grep -o '"totalScenarios":[0-9]*' ui_test_summary.json | cut -d':' -f2)
    SUCCESS_SCENARIOS=$(grep -o '"successfulScenarios":[0-9]*' ui_test_summary.json | cut -d':' -f2)
    TOTAL_STEPS=$(grep -o '"totalSteps":[0-9]*' ui_test_summary.json | cut -d':' -f2)
    SUCCESS_STEPS=$(grep -o '"successfulSteps":[0-9]*' ui_test_summary.json | cut -d':' -f2)
    TOTAL_ERRORS=$(grep -o '"totalErrors":[0-9]*' ui_test_summary.json | cut -d':' -f2)
    
    echo "   📋 Scenarios: $SUCCESS_SCENARIOS/$TOTAL_SCENARIOS passed" | tee -a "$TEST_LOG"
    echo "   🔧 Steps: $SUCCESS_STEPS/$TOTAL_STEPS passed" | tee -a "$TEST_LOG"  
    echo "   🚨 Errors: $TOTAL_ERRORS" | tee -a "$TEST_LOG"
    
    # Screenshot sayısını hesapla
    SCREENSHOT_COUNT=$(ls -1 *.png 2>/dev/null | wc -l)
    echo "   📸 Screenshots: $SCREENSHOT_COUNT captured" | tee -a "$TEST_LOG"
    
    # Video sayısını hesapla
    VIDEO_COUNT=$(ls -1 test-videos/*.webm 2>/dev/null | wc -l || echo 0)
    echo "   🎥 Videos: $VIDEO_COUNT recorded" | tee -a "$TEST_LOG"
    
else
    echo -e "${YELLOW}⚠️ UI test summary not available${NC}" | tee -a "$TEST_LOG"
    TOTAL_SCENARIOS=0
    SUCCESS_SCENARIOS=0
    TOTAL_ERRORS=1
fi

echo "" | tee -a "$TEST_LOG"

# Error count hesapla
ERROR_COUNT=0
if [[ -f "$ERROR_LOG" ]]; then
    ERROR_COUNT=$(grep -c '^{' "$ERROR_LOG" 2>/dev/null || echo 0)
fi

# Screenshot listesi
echo -e "${CYAN}📸 Generated Test Artifacts:${NC}" | tee -a "$TEST_LOG"
if ls *.png > /dev/null 2>&1; then
    echo "   Screenshots:" | tee -a "$TEST_LOG"
    ls -1 *.png | head -10 | sed 's/^/     - /' | tee -a "$TEST_LOG"
    if [[ $(ls -1 *.png | wc -l) -gt 10 ]]; then
        echo "     ... and $(($(ls -1 *.png | wc -l) - 10)) more" | tee -a "$TEST_LOG"
    fi
fi

if ls test-videos/*.webm > /dev/null 2>&1; then
    echo "   Videos:" | tee -a "$TEST_LOG"
    ls -1 test-videos/*.webm | sed 's/^/     - /' | tee -a "$TEST_LOG"
fi

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 6. DETAYLI PROMPT OLUŞTURMA
# =============================================================================

echo -e "${BLUE}6️⃣ Generating Detailed Analysis Prompt${NC}" | tee -a "$TEST_LOG"
echo "=======================================" | tee -a "$TEST_LOG"

# Sonuç durumunu belirle
if [[ "$SUCCESS_SCENARIOS" -eq "$TOTAL_SCENARIOS" && "$TOTAL_ERRORS" -eq 0 ]]; then
    OVERALL_STATUS="SUCCESS"
    STATUS_EMOJI="🎉"
    STATUS_COLOR="${GREEN}"
elif [[ "$SUCCESS_SCENARIOS" -gt 0 ]]; then
    OVERALL_STATUS="PARTIAL"
    STATUS_EMOJI="⚠️"
    STATUS_COLOR="${YELLOW}"
else
    OVERALL_STATUS="FAILED"
    STATUS_EMOJI="❌"
    STATUS_COLOR="${RED}"
fi

echo -e "${STATUS_COLOR}$STATUS_EMOJI Overall Status: $OVERALL_STATUS${NC}" | tee -a "$TEST_LOG"

# Detaylı prompt oluştur
cat > "$PROMPT_FILE" << EOF
# 🎭 Flowner Detailed UI Test Results - $(echo $OVERALL_STATUS)

## 📊 Test Session Summary
- **Test Date**: $(date)
- **Session ID**: $TEST_SESSION
- **Overall Status**: $STATUS_EMOJI $OVERALL_STATUS
- **Test Duration**: ~$((TOTAL_STEPS * 2)) seconds estimated

## 🎯 UI Test Coverage Results

### Scenario Success Rate
- **Scenarios Tested**: $TOTAL_SCENARIOS
- **Scenarios Passed**: $SUCCESS_SCENARIOS
- **Success Rate**: $(( SUCCESS_SCENARIOS * 100 / TOTAL_SCENARIOS ))%

### Step Execution Details  
- **Total Steps**: $TOTAL_STEPS
- **Steps Passed**: $SUCCESS_STEPS
- **Step Success Rate**: $(( SUCCESS_STEPS * 100 / TOTAL_STEPS ))%
- **Errors Found**: $TOTAL_ERRORS

### 📸 Generated Artifacts
- **Screenshots**: $SCREENSHOT_COUNT captured
- **Videos**: $VIDEO_COUNT recorded
- **Test Data**: ui_test_results.json
- **Error Log**: Available in JSON format

## 🧪 Test Scenarios Covered

### 1. Admin Dashboard Overview & Navigation
- ✅ Login flow with form interaction
- 📋 Dashboard element verification  
- 🧭 Navigation menu testing (Forms, Workflows, Processes)
- 📸 Visual regression screenshots

### 2. Admin Form Creation Flow
- 📝 Modal dialog interaction
- 📋 Form creation with field validation
- 💾 Save/Create button functionality
- ✅ Success message verification

### 3. Form Builder Field Interaction
- 🎨 Form builder interface loading
- 🔧 Drag-and-drop field placement
- ⚙️ Field configuration and properties
- 💾 Draft saving functionality

### 4. Designer BPMN Workflow Creation  
- 🔄 BPMN designer interface
- 🎨 Element palette interaction
- 📐 Process element placement
- 🔗 Workflow connection logic

### 5. User Task Completion Flow
- 📥 Task inbox interface
- 📋 Task detail view
- 📝 Form filling and submission
- ✅ Task completion verification

### 6. Responsive UI Testing
- 🖥️ Desktop view (1920x1080)
- 📱 Tablet view (768x1024)  
- 📱 Mobile view (375x667)
- 📐 Responsive navigation testing

## 🔍 Detailed Findings

$(if [[ -f "ui_test_results.json" ]]; then
echo "### Test Execution Details"
echo "\`\`\`json"
head -50 ui_test_results.json 2>/dev/null || echo "Test results available in ui_test_results.json"
echo "\`\`\`"
fi)

### 🚨 Issues Identified
$(if [[ "$TOTAL_ERRORS" -gt 0 ]]; then
echo "**Found $TOTAL_ERRORS error(s) during testing:**"
if [[ -f "$ERROR_LOG" ]]; then
    cat "$ERROR_LOG" | head -10
fi
echo ""
echo "**Common Issue Categories:**"
echo "- 🔍 Element not found (selectors need updating)"
echo "- ⏱️ Timeout issues (page loading too slow)"  
echo "- 🎯 UI element interaction failures"
echo "- 📝 Form field identification problems"
echo "- 🧭 Navigation menu structure changes"
else
echo "**✅ No critical errors found!**"
echo ""
echo "All UI interactions working correctly:"
echo "- ✅ Login forms functional"
echo "- ✅ Navigation menus responsive"
echo "- ✅ Modal dialogs opening/closing"
echo "- ✅ Form fields accepting input"
echo "- ✅ Button clicks registering"
echo "- ✅ Page transitions smooth"
fi)

## 🛠️ Required Actions

$(if [[ "$OVERALL_STATUS" == "SUCCESS" ]]; then
cat << 'EOL'
### 🎉 Great Success! 
Your UI is working excellently. Consider these enhancements:

1. **Performance Optimization**:
   - Add loading states for better UX
   - Implement skeleton screens  
   - Optimize image loading

2. **Accessibility Improvements**:
   - Add ARIA labels to form elements
   - Ensure keyboard navigation works
   - Test with screen readers

3. **Advanced UI Features**:
   - Add drag-and-drop visual feedback
   - Implement undo/redo in form builder
   - Add real-time collaboration features

4. **Mobile Experience**:
   - Fine-tune responsive breakpoints
   - Add touch-friendly interaction areas
   - Optimize mobile form layouts
EOL
elif [[ "$OVERALL_STATUS" == "PARTIAL" ]]; then
cat << 'EOL'
### ⚠️ Partial Success - Action Required

**Priority 1 - Critical Fixes**:
1. Fix failing test scenarios (see errors above)
2. Update element selectors for changed UI components
3. Resolve timeout issues in slow-loading pages

**Priority 2 - UI Improvements**:  
1. Standardize button text/labels (Kaydet vs Save)
2. Ensure consistent modal dialog behavior
3. Fix responsive navigation issues

**Priority 3 - User Experience**:
1. Add loading states for long operations
2. Improve error message display
3. Add success feedback for all actions
EOL
else
cat << 'EOL'
### ❌ Critical Issues - Immediate Action Required

**🔥 Critical Fixes Needed**:
1. **Login System**: Authentication flow broken
2. **Navigation**: Menu systems not responding  
3. **Form Interactions**: Field input/submission failing
4. **Page Loading**: Timeouts and rendering issues

**🔧 Technical Fixes**:
1. Update all element selectors in test scripts
2. Fix JavaScript console errors
3. Resolve CSS/layout issues preventing interaction
4. Check network requests for API failures

**🎯 UI/UX Fixes**:
1. Ensure all buttons are clickable
2. Fix form validation and submission
3. Resolve modal dialog functionality
4. Fix responsive design breakpoints
EOL
fi)

## 📋 Test Validation Steps

To verify fixes, run these commands:

\`\`\`bash
# 1. Re-run the detailed UI tests
cd ui-test-logs
node detailed_ui_test.js

# 2. Check specific scenarios
grep -A 5 -B 5 "error\|fail" ui_test_results.json

# 3. Review screenshots for visual issues
ls -la *.png | head -10

# 4. Check video recordings for interaction problems
ls -la test-videos/

# 5. Run the full test again
cd .. && ./detailed_ui_test_system.sh
\`\`\`

## ✅ Success Criteria

**UI tests should achieve**:
- ✅ 100% scenario success rate
- ✅ 0 critical JavaScript errors
- ✅ All forms functional (create/edit/save)
- ✅ Navigation working across all roles
- ✅ Responsive design on all screen sizes
- ✅ Modal dialogs opening/closing correctly
- ✅ Drag-and-drop features working (if implemented)

## 📊 Performance Benchmarks

**Acceptable Performance**:
- Login: < 3 seconds
- Page navigation: < 2 seconds
- Form submission: < 5 seconds
- Modal opening: < 1 second
- Responsive resize: < 0.5 seconds

## 🎯 Next Steps

$(if [[ "$OVERALL_STATUS" == "SUCCESS" ]]; then
echo "1. 🚀 **Production Ready**: Deploy with confidence"
echo "2. 📈 **Performance Testing**: Run load tests"
echo "3. 🧪 **User Acceptance Testing**: Get real user feedback" 
echo "4. 📱 **Cross-browser Testing**: Test on Safari, Firefox, Edge"
else
echo "1. 🔧 **Fix Critical Issues**: Address failed scenarios first"
echo "2. ⚡ **Re-run Tests**: Verify fixes work"
echo "3. 🎯 **Iterative Improvement**: Fix → Test → Repeat"
echo "4. ✅ **Achieve 100% Pass Rate**: All scenarios must pass"
fi)

---

**Debug Files Available**:
- 📄 Full test log: \`$TEST_LOG\`
- 📊 Test results: \`ui_test_results.json\`
- 🖼️ Screenshots: \`$(ls *.png 2>/dev/null | wc -l) files\`
- 🎥 Videos: \`test-videos/ directory\`

**Test completed**: $(date)
**Status**: $STATUS_EMOJI **$OVERALL_STATUS**
EOF

# Prompt'u göster
echo -e "${GREEN}✅ Detailed analysis prompt generated: $PROMPT_FILE${NC}" | tee -a "$TEST_LOG"
echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 7. FINAL SUMMARY
# =============================================================================

echo -e "${PURPLE}🎭 DETAILED UI TEST SUMMARY${NC}"
echo -e "${PURPLE}============================${NC}"
echo ""
echo -e "${CYAN}📊 Test Results:${NC}"
echo -e "   Scenarios: ${STATUS_COLOR}$SUCCESS_SCENARIOS/$TOTAL_SCENARIOS${NC}"
echo -e "   Steps: ${STATUS_COLOR}$SUCCESS_STEPS/$TOTAL_STEPS${NC}"
echo -e "   Errors: ${STATUS_COLOR}$TOTAL_ERRORS${NC}"
echo ""
echo -e "${CYAN}📁 Generated Files:${NC}"
echo -e "   📝 Test log: $TEST_LOG"
echo -e "   📋 Detailed prompt: $PROMPT_FILE"
echo -e "   📊 UI results: ui_test_results.json (if available)"
echo -e "   📸 Screenshots: $SCREENSHOT_COUNT files"
echo -e "   🎥 Videos: $VIDEO_COUNT files"
echo ""

if [[ "$OVERALL_STATUS" == "SUCCESS" ]]; then
    echo -e "${GREEN}🎉 DETAILED UI TESTS: PASSED!${NC}"
    echo -e "${GREEN}Your Flowner platform UI is production-ready!${NC}"
    echo ""
    echo -e "${CYAN}🚀 Ready for:${NC}"
    echo -e "   ✅ Production deployment"
    echo -e "   ✅ User acceptance testing"
    echo -e "   ✅ Performance optimization"
    echo ""
elif [[ "$OVERALL_STATUS" == "PARTIAL" ]]; then
    echo -e "${YELLOW}⚠️ DETAILED UI TESTS: PARTIAL SUCCESS${NC}"
    echo -e "${YELLOW}Some issues found but core functionality works${NC}"
    echo ""
    echo -e "${CYAN}📋 Action Items:${NC}"
    echo -e "   1. Review failed scenarios"
    echo -e "   2. Fix element selectors"
    echo -e "   3. Re-run tests"
    echo ""
else
    echo -e "${RED}❌ DETAILED UI TESTS: FAILED${NC}"
    echo -e "${RED}Critical UI issues require immediate attention${NC}"
    echo ""
    echo -e "${CYAN}🔥 Urgent Actions:${NC}"
    echo -e "   1. Check browser console for errors"
    echo -e "   2. Verify all UI components load"
    echo -e "   3. Fix authentication/navigation issues"
    echo ""
fi

echo -e "${BLUE}📋 To view detailed analysis:${NC}"
echo -e "   cat $PROMPT_FILE"
echo ""
echo -e "${BLUE}📸 To view screenshots:${NC}" 
echo -e "   ls -la *.png"
echo ""

# Exit code
if [[ "$OVERALL_STATUS" == "SUCCESS" ]]; then
    exit 0
else
    exit 1
fi