# Test each endpoint with proper authentication
for endpoint in "${ENDPOINTS[@]}"; do
    method=$(echo "$endpoint" | cut -d' ' -f1)
    path=$(echo "$endpoint" | cut -d' ' -f2)
    
    echo -e "üîç Testing: $method $path" | tee -a "$TEST_LOG"
    
    if [[ "$method" == "GET" ]]; then
        if [[ -n "$AUTH_HEADER" ]]; then
            response=$(curl -s -w "%{http_code}" "$API_BASE$path" \
              -H "$AUTH_HEADER" \
              -H "X-Tenant-Id: demo.local" 2>/dev/null || echo "000")
        else
            response=$(curl -s -w "%{http_code}" "$API_BASE$path" 2>/dev/null || echo "000")
        fi
        
        status_code="${response: -3}"
        
        if [[ "$status_code" =~ ^[23] ]]; then
            echo -e "${GREEN}   ‚úÖ $status_code${NC}" | tee -a "$TEST_LOG"
        else
            echo -e "${RED}   ‚ùå $status_code${NC}" | tee -a "$TEST_LOG"
            echo '{"error": "API endpoint failed", "method": "'$method'", "path": "'$path'", "status": '$status_code', "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
        fi
    elif [[ "$method" == "POST" && "$path" == "/api/auth/login" ]]; then
        # Login endpoint'i zaten test edildi, skip
        echo -e "${GREEN}   ‚úÖ Already tested (login)${NC}" | tee -a "$TEST_LOG"
    fi
done

# Test user-specific endpoints with different credentials
echo -e "${BLUE}üîê Testing User-Specific Endpoints${NC}" | tee -a "$TEST_LOG"
echo "===================================" | tee -a "$TEST_LOG"

USER_TESTS=(
    "admin@demo.local:Passw0rd!:admin"
    "designer@demo.local:Designer123!:designer"
    "user@demo.local:User123!:user"
)

for user_test in "${USER_TESTS[@]}"; do
    IFS=':' read -r email password role <<< "$user_test"
    echo -e "üë§ Testing as $role ($email)..." | tee -a "$TEST_LOG"
    
    # Login with specific user
    user_login_response=$(curl -s -X POST "$API_BASE/api/auth/login" \
        -H "Content-Type: application/json" \
        -H "X-Tenant-Id: demo.local" \
        -d "{\"email\":\"$email\",\"password\":\"$password\"}" 2>/dev/null || echo '{}')
    
    user_token=$(echo "$user_login_response" | grep -o '"accessToken":"[^"]*"' | cut -d'"' -f4 || echo "")
    
    if [[ -n "$user_token" ]]; then
        echo -e "   ‚úÖ Login successful" | tee -a "$TEST_LOG"
        
        # Test role-specific endpoints
        case "$role" in
            "admin")
                USER_ENDPOINTS=(
                    "GET /api/v1/tenants"
                    "GET /api/v1/users"
                    "GET /api/analytics/dashboard"
                )
                ;;
            "designer")
                USER_ENDPOINTS=(
                    "GET /api/workflows"
                    "GET /api/forms"
                    "GET /api/processes"
                )
                ;;
            "user")
                USER_ENDPOINTS=(
                    "GET /api/tasks/my-tasks"
                    "GET /api/processes?status=active"
                )
                ;;
        esac
        
        for user_endpoint in "${USER_ENDPOINTS[@]}"; do
            user_method=$(echo "$user_endpoint" | cut -d' ' -f1)
            user_path=$(echo "$user_endpoint" | cut -d' ' -f2)
            
            echo -e "   üîç $user_method $user_path" | tee -a "$TEST_LOG"
            
            if [[ "$user_method" == "GET" ]]; then
                user_response=$(curl -s -w "%{http_code}" "$API_BASE$user_path" \
                    -H "Authorization: Bearer $user_token" \
                    -H "X-Tenant-Id: demo.local" 2>/dev/null || echo "000")
                
                user_status="${user_response: -3}"
                
                if [[ "$user_status" =~ ^[23] ]]; then
                    echo -e "      ${GREEN}‚úÖ $user_status${NC}" | tee -a "$TEST_LOG"
                else
                    echo -e "      ${RED}‚ùå $user_status${NC}" | tee -a "$TEST_LOG"
                    echo '{"error": "User-specific endpoint failed", "user": "'$role'", "method": "'$user_method'", "path": "'$user_path'", "status": '$user_status', "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
                fi
            fi
        done
        
    else
        echo -e "   ${RED}‚ùå Login failed${NC}" | tee -a "$TEST_LOG"
        echo '{"error": "User login failed", "user": "'$role'", "email": "'$email'", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
    fi
    
    echo "" | tee -a "$TEST_LOG"
done#!/bin/bash

# =============================================================================
# Flowner Alpha Test Automation System
# Otomatik hata tespit, loglama ve d√ºzeltme prompt √ºretimi
# =============================================================================

set -e

PROJECT_ROOT="."
LOG_DIR="./alpha-test-logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
TEST_SESSION="alpha_test_$TIMESTAMP"

# Renkli output i√ßin
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Flowner Alpha Test Automation System${NC}"
echo -e "${BLUE}=====================================${NC}"
echo ""

# Log dizinini olu≈ütur
mkdir -p "$LOG_DIR"
cd "$LOG_DIR"

# Test session dosyasƒ±
TEST_LOG="$TEST_SESSION.log"
ERROR_LOG="$TEST_SESSION.errors.json"
PROMPT_FILE="$TEST_SESSION.prompt.md"

echo -e "${YELLOW}üìÅ Test Session: $TEST_SESSION${NC}"
echo -e "${YELLOW}üìù Logs: $LOG_DIR/$TEST_LOG${NC}"
echo ""

# =============================================================================
# 1. SISTEM DURUMU KONTROL√ú
# =============================================================================

echo -e "${BLUE}1Ô∏è‚É£ Sistem Durumu Kontrol√º${NC}" | tee -a "$TEST_LOG"
echo "================================" | tee -a "$TEST_LOG"

# Backend health check
echo -e "üîç Backend Health Check..." | tee -a "$TEST_LOG"
if curl -s http://localhost:5000/api/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend running on port 5000${NC}" | tee -a "$TEST_LOG"
    BACKEND_STATUS="OK"
else
    echo -e "${RED}‚ùå Backend not running on port 5000${NC}" | tee -a "$TEST_LOG"
    BACKEND_STATUS="ERROR"
    echo '{"error": "Backend not running", "port": 5000, "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
fi

# Frontend check - Test both unified (5000) and split (5174, 5175) architectures
echo -e "üîç Frontend Architecture Check..." | tee -a "$TEST_LOG"
FRONTEND_PORTS=(5000 5174 5175)
FRONTEND_STATUS="OK"

# Test unified architecture (port 5000)
if curl -s http://localhost:5000/admin/dashboard > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Unified frontend on port 5000 (serving admin + portal)${NC}" | tee -a "$TEST_LOG"
    ARCHITECTURE="unified"
    ADMIN_BASE_URL="http://localhost:5000"
    PORTAL_BASE_URL="http://localhost:5000"
else
    echo -e "${YELLOW}‚ö†Ô∏è Unified frontend not detected on port 5000${NC}" | tee -a "$TEST_LOG"
    ARCHITECTURE="split"
fi

# Test split architecture (5174 admin, 5175 portal)
if curl -s http://localhost:5174 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Admin app running on port 5174${NC}" | tee -a "$TEST_LOG"
    ADMIN_BASE_URL="http://localhost:5174"
    ARCHITECTURE="split"
else
    echo -e "${YELLOW}‚ö†Ô∏è No admin app on port 5174${NC}" | tee -a "$TEST_LOG"
fi

if curl -s http://localhost:5175 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Portal app running on port 5175${NC}" | tee -a "$TEST_LOG"
    PORTAL_BASE_URL="http://localhost:5175"
    ARCHITECTURE="split"
else
    echo -e "${YELLOW}‚ö†Ô∏è No portal app on port 5175${NC}" | tee -a "$TEST_LOG"
fi

# Set default URLs if not detected
ADMIN_BASE_URL=${ADMIN_BASE_URL:-"http://localhost:5000"}
PORTAL_BASE_URL=${PORTAL_BASE_URL:-"http://localhost:5000"}

echo -e "${BLUE}üìê Architecture: $ARCHITECTURE${NC}" | tee -a "$TEST_LOG"
echo -e "${BLUE}üîó Admin URL: $ADMIN_BASE_URL${NC}" | tee -a "$TEST_LOG"
echo -e "${BLUE}üîó Portal URL: $PORTAL_BASE_URL${NC}" | tee -a "$TEST_LOG"

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 2. BROWSER CONSOLE LOG COLLECTION
# =============================================================================

echo -e "${BLUE}2Ô∏è‚É£ Browser Console Log Collection${NC}" | tee -a "$TEST_LOG"
echo "===================================" | tee -a "$TEST_LOG"

# Playwright ile komprehensif browser testing
cat > browser_test.js << 'EOF'
const { chromium } = require('playwright');
const fs = require('fs');

// Test kullanƒ±cƒ±larƒ±
const TEST_USERS = [
  {
    role: 'admin',
    email: 'admin@demo.local',
    password: 'Passw0rd!',
    expectedRedirect: '/admin/dashboard',
    testMenus: ['dashboard', 'forms', 'workflows', 'processes', 'tenants', 'users']
  },
  {
    role: 'designer', 
    email: 'designer@demo.local',
    password: 'Designer123!',
    expectedRedirect: '/admin/dashboard',
    testMenus: ['dashboard', 'forms', 'workflows', 'processes']
  },
  {
    role: 'user',
    email: 'user@demo.local', 
    password: 'User123!',
    expectedRedirect: '/portal/tasks',
    testMenus: ['tasks', 'my-processes', 'profile']
  }
];

// URL configuration
const ADMIN_BASE_URL = process.env.ADMIN_BASE_URL || 'http://localhost:5000';
const PORTAL_BASE_URL = process.env.PORTAL_BASE_URL || 'http://localhost:5000';

async function collectBrowserLogs() {
  const browser = await chromium.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: 'AlphaTest-Bot/1.0'
  });
  
  const logs = [];
  const errors = [];
  const testResults = [];

  console.log(`üîß Testing Architecture: ${ADMIN_BASE_URL === PORTAL_BASE_URL ? 'Unified' : 'Split'}`);
  console.log(`üîó Admin Base: ${ADMIN_BASE_URL}`);
  console.log(`üîó Portal Base: ${PORTAL_BASE_URL}`);

  // Global error handler
  const setupPageErrorHandlers = (page, testContext) => {
    page.on('console', msg => {
      const log = {
        context: testContext,
        type: msg.type(),
        text: msg.text(),
        location: msg.location(),
        timestamp: new Date().toISOString()
      };
      logs.push(log);
      
      if (msg.type() === 'error') {
        errors.push({...log, severity: 'error'});
      }
    });
    
    page.on('requestfailed', request => {
      const error = {
        context: testContext,
        type: 'network_error',
        url: request.url(),
        failure: request.failure()?.errorText || 'Unknown network error',
        timestamp: new Date().toISOString(),
        severity: 'error'
      };
      errors.push(error);
    });
    
    page.on('pageerror', error => {
      errors.push({
        context: testContext,
        type: 'page_error',
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString(),
        severity: 'critical'
      });
    });
  };

  // Test her kullanƒ±cƒ± i√ßin
  for (const user of TEST_USERS) {
    console.log(`\nüë§ Testing user: ${user.role} (${user.email})`);
    
    const page = await context.newPage();
    const testContext = `user_${user.role}`;
    
    setupPageErrorHandlers(page, testContext);
    
    const userTestResult = {
      user: user.role,
      email: user.email,
      tests: [],
      success: true,
      errors: []
    };

    try {
      // 1. Login testi
      console.log('  üîê Testing login...');
      
      const loginUrl = `${ADMIN_BASE_URL}/login`;
      await page.goto(loginUrl, { waitUntil: 'networkidle', timeout: 10000 });
      
      // Login form screenshot
      await page.screenshot({ 
        path: `login_${user.role}_step1.png`,
        fullPage: true 
      });
      
      // Login form doldur
      const emailSelector = 'input[name="email"], input[type="email"], #email';
      const passwordSelector = 'input[name="password"], input[type="password"], #password';
      const loginButtonSelector = 'button[type="submit"], button:has-text("Giri≈ü"), button:has-text("Login")';
      
      await page.waitForSelector(emailSelector, { timeout: 5000 });
      await page.fill(emailSelector, user.email);
      await page.fill(passwordSelector, user.password);
      
      // Login butonuna tƒ±kla
      await page.click(loginButtonSelector);
      
      // Redirect bekle
      await page.waitForLoadState('networkidle', { timeout: 10000 });
      
      const currentUrl = page.url();
      const expectedPath = user.expectedRedirect;
      
      if (currentUrl.includes(expectedPath)) {
        console.log(`    ‚úÖ Login successful, redirected to ${expectedPath}`);
        userTestResult.tests.push({
          name: 'login',
          status: 'success',
          message: `Redirected to ${expectedPath}`
        });
      } else {
        console.log(`    ‚ùå Login failed, expected ${expectedPath}, got ${currentUrl}`);
        userTestResult.tests.push({
          name: 'login',
          status: 'failed',
          message: `Expected ${expectedPath}, got ${currentUrl}`
        });
        userTestResult.success = false;
      }

      // Login sonrasƒ± screenshot
      await page.screenshot({ 
        path: `login_${user.role}_step2.png`,
        fullPage: true 
      });

      // 2. Men√º testleri
      console.log('  üìã Testing navigation menus...');
      
      for (const menu of user.testMenus) {
        console.log(`    üß≠ Testing menu: ${menu}`);
        
        try {
          // Men√º linkini ara
          let menuSelector;
          let targetUrl;
          
          if (user.role === 'user') {
            // Portal men√ºler
            switch (menu) {
              case 'tasks':
                menuSelector = 'a[href*="/portal/tasks"], nav a:has-text("G√∂revlerim"), nav a:has-text("Tasks")';
                targetUrl = `${PORTAL_BASE_URL}/portal/tasks`;
                break;
              case 'my-processes':
                menuSelector = 'a[href*="/portal/my-processes"], nav a:has-text("S√ºre√ßlerim"), nav a:has-text("My Processes")';
                targetUrl = `${PORTAL_BASE_URL}/portal/my-processes`;
                break;
              case 'profile':
                menuSelector = 'a[href*="/portal/profile"], nav a:has-text("Profil"), nav a:has-text("Profile")';
                targetUrl = `${PORTAL_BASE_URL}/portal/profile`;
                break;
            }
          } else {
            // Admin men√ºler
            switch (menu) {
              case 'dashboard':
                menuSelector = 'a[href*="/admin/dashboard"], nav a:has-text("Dashboard")';
                targetUrl = `${ADMIN_BASE_URL}/admin/dashboard`;
                break;
              case 'forms':
                menuSelector = 'a[href*="/admin/forms"], nav a:has-text("Formlar"), nav a:has-text("Forms")';
                targetUrl = `${ADMIN_BASE_URL}/admin/forms`;
                break;
              case 'workflows':
                menuSelector = 'a[href*="/admin/workflows"], nav a:has-text("ƒ∞≈ü Akƒ±≈ülarƒ±"), nav a:has-text("Workflows")';
                targetUrl = `${ADMIN_BASE_URL}/admin/workflows`;
                break;
              case 'processes':
                menuSelector = 'a[href*="/admin/processes"], nav a:has-text("S√ºre√ßler"), nav a:has-text("Processes")';
                targetUrl = `${ADMIN_BASE_URL}/admin/processes`;
                break;
              case 'tenants':
                menuSelector = 'a[href*="/admin/tenants"], nav a:has-text("Tenants")';
                targetUrl = `${ADMIN_BASE_URL}/admin/tenants`;
                break;
              case 'users':
                menuSelector = 'a[href*="/admin/users"], nav a:has-text("Users"), nav a:has-text("Kullanƒ±cƒ±lar")';
                targetUrl = `${ADMIN_BASE_URL}/admin/users`;
                break;
            }
          }
          
          // Men√ºy√º bul ve tƒ±kla
          const menuElement = await page.locator(menuSelector).first();
          
          if (await menuElement.count() > 0) {
            await menuElement.click();
            await page.waitForLoadState('networkidle', { timeout: 5000 });
            
            const menuUrl = page.url();
            await page.screenshot({ 
              path: `menu_${user.role}_${menu}.png`,
              fullPage: true 
            });
            
            console.log(`      ‚úÖ Menu ${menu} accessible: ${menuUrl}`);
            userTestResult.tests.push({
              name: `menu_${menu}`,
              status: 'success',
              message: `Navigated to ${menuUrl}`
            });
            
            // 2 saniye bekle sayfa y√ºklensin
            await page.waitForTimeout(2000);
            
          } else {
            console.log(`      ‚ùå Menu ${menu} not found or not clickable`);
            userTestResult.tests.push({
              name: `menu_${menu}`,
              status: 'failed',
              message: `Menu element not found: ${menuSelector}`
            });
            userTestResult.success = false;
          }
          
        } catch (error) {
          console.log(`      ‚ùå Menu ${menu} error: ${error.message}`);
          userTestResult.tests.push({
            name: `menu_${menu}`,
            status: 'error',
            message: error.message
          });
          userTestResult.success = false;
          
          userTestResult.errors.push({
            menu: menu,
            error: error.message,
            stack: error.stack
          });
        }
      }

      // 3. Logout testi
      console.log('  üö™ Testing logout...');
      
      try {
        // Logout button'ƒ±nƒ± ara (genelde header'da user menu i√ßinde)
        const userMenuSelectors = [
          'button:has-text("admin@demo.local")',
          'button:has-text("designer@demo.local")',
          'button:has-text("user@demo.local")',
          '[data-testid="user-menu"]',
          '.user-menu',
          'button[aria-label*="user"]'
        ];
        
        let userMenuFound = false;
        for (const selector of userMenuSelectors) {
          const menuButton = page.locator(selector).first();
          if (await menuButton.count() > 0) {
            await menuButton.click();
            await page.waitForTimeout(1000); // Dropdown a√ßƒ±lmasƒ± i√ßin bekle
            userMenuFound = true;
            break;
          }
        }
        
        if (userMenuFound) {
          // Logout linkini ara
          const logoutSelectors = [
            'a:has-text("√áƒ±kƒ±≈ü")',
            'a:has-text("Logout")',
            'button:has-text("√áƒ±kƒ±≈ü")',
            'button:has-text("Logout")',
            '[data-testid="logout"]'
          ];
          
          let loggedOut = false;
          for (const selector of logoutSelectors) {
            const logoutButton = page.locator(selector).first();
            if (await logoutButton.count() > 0) {
              await logoutButton.click();
              await page.waitForLoadState('networkidle', { timeout: 5000 });
              
              if (page.url().includes('/login')) {
                console.log('    ‚úÖ Logout successful');
                userTestResult.tests.push({
                  name: 'logout',
                  status: 'success',
                  message: 'Redirected to login page'
                });
              }
              loggedOut = true;
              break;
            }
          }
          
          if (!loggedOut) {
            console.log('    ‚ö†Ô∏è Logout button not found in user menu');
            userTestResult.tests.push({
              name: 'logout',
              status: 'warning',
              message: 'Logout button not found in user menu'
            });
          }
        } else {
          console.log('    ‚ö†Ô∏è User menu not found for logout test');
          userTestResult.tests.push({
            name: 'logout',
            status: 'warning',
            message: 'User menu not found'
          });
        }
        
      } catch (error) {
        console.log(`    ‚ùå Logout error: ${error.message}`);
        userTestResult.tests.push({
          name: 'logout',
          status: 'error',
          message: error.message
        });
      }

    } catch (error) {
      console.log(`  ‚ùå User test failed: ${error.message}`);
      userTestResult.success = false;
      userTestResult.errors.push({
        general: error.message,
        stack: error.stack
      });
    }

    await page.close();
    testResults.push(userTestResult);
    
    // Her kullanƒ±cƒ± arasƒ±nda 1 saniye bekle
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  await browser.close();
  
  // Test sonu√ßlarƒ±nƒ± kaydet
  fs.writeFileSync('browser_logs.json', JSON.stringify(logs, null, 2));
  fs.writeFileSync('browser_errors.json', JSON.stringify(errors, null, 2));
  fs.writeFileSync('user_test_results.json', JSON.stringify(testResults, null, 2));
  
  // √ñzet rapor
  const summary = {
    totalUsers: testResults.length,
    successfulUsers: testResults.filter(r => r.success).length,
    totalTests: testResults.reduce((sum, r) => sum + r.tests.length, 0),
    successfulTests: testResults.reduce((sum, r) => sum + r.tests.filter(t => t.status === 'success').length, 0),
    totalErrors: errors.length,
    criticalErrors: errors.filter(e => e.severity === 'critical').length
  };
  
  fs.writeFileSync('test_summary.json', JSON.stringify(summary, null, 2));
  
  console.log(`\nüìä Test Summary:`);
  console.log(`   Users tested: ${summary.successfulUsers}/${summary.totalUsers}`);
  console.log(`   Tests passed: ${summary.successfulTests}/${summary.totalTests}`);
  console.log(`   Errors found: ${summary.totalErrors} (${summary.criticalErrors} critical)`);
  
  return { logs, errors, testResults, summary };
}

// Export environment variables for browser test
process.env.ADMIN_BASE_URL = process.env.ADMIN_BASE_URL || 'http://localhost:5000';
process.env.PORTAL_BASE_URL = process.env.PORTAL_BASE_URL || 'http://localhost:5000';

collectBrowserLogs().then(result => {
  const success = result.summary.successfulUsers === result.summary.totalUsers && 
                  result.summary.criticalErrors === 0;
  
  console.log(success ? '\nüéâ All user tests passed!' : '\n‚ùå Some tests failed!');
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('Browser test failed:', error);
  process.exit(1);
});
EOF

# Eƒüer playwright kuruluysa komprehensif user testini √ßalƒ±≈ütƒ±r
if command -v npx > /dev/null && npx playwright --version > /dev/null 2>&1; then
    echo -e "üåê Running comprehensive user testing..." | tee -a "$TEST_LOG"
    
    # Environment variables'larƒ± browser testine ge√ßir
    export ADMIN_BASE_URL="$ADMIN_BASE_URL"
    export PORTAL_BASE_URL="$PORTAL_BASE_URL"
    
    echo -e "üîß Architecture Configuration:" | tee -a "$TEST_LOG"
    echo -e "   Admin URL: $ADMIN_BASE_URL" | tee -a "$TEST_LOG"
    echo -e "   Portal URL: $PORTAL_BASE_URL" | tee -a "$TEST_LOG"
    
    if node browser_test.js 2>&1 | tee -a "$TEST_LOG"; then
        echo -e "${GREEN}‚úÖ Comprehensive user tests completed${NC}" | tee -a "$TEST_LOG"
        
        # User test sonu√ßlarƒ±nƒ± ana error log'a ekle
        if [[ -f "browser_errors.json" ]]; then
            cat browser_errors.json >> "$ERROR_LOG"
        fi
        
        # Test summary g√∂ster
        if [[ -f "test_summary.json" ]]; then
            echo -e "${BLUE}üìä User Test Summary:${NC}" | tee -a "$TEST_LOG"
            cat test_summary.json | tee -a "$TEST_LOG"
        fi
        
        # User test sonu√ßlarƒ±nƒ± g√∂ster
        if [[ -f "user_test_results.json" ]]; then
            echo -e "${BLUE}üë• User Test Details:${NC}" | tee -a "$TEST_LOG"
            
            # Her kullanƒ±cƒ± i√ßin √∂zet
            for role in admin designer user; do
                echo -e "  üë§ $role:" | tee -a "$TEST_LOG"
                grep -A 20 "\"user\": \"$role\"" user_test_results.json | grep -E "(success|status)" | head -5 | tee -a "$TEST_LOG"
            done
        fi
        
    else
        echo -e "${RED}‚ùå Comprehensive user tests failed${NC}" | tee -a "$TEST_LOG"
        echo '{"error": "Comprehensive user tests failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Playwright not available, running basic browser tests...${NC}" | tee -a "$TEST_LOG"
    echo -e "Install with: npm install -D playwright && npx playwright install" | tee -a "$TEST_LOG"
    
    # Basic curl testleri
    echo -e "üåê Running basic URL tests..." | tee -a "$TEST_LOG"
    BASIC_URLS=(
        "$ADMIN_BASE_URL/login"
        "$ADMIN_BASE_URL/admin/dashboard" 
        "$PORTAL_BASE_URL/portal/tasks"
    )
    
    for url in "${BASIC_URLS[@]}"; do
        echo -e "üîç Testing: $url" | tee -a "$TEST_LOG"
        
        if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -E "^[23]" > /dev/null; then
            echo -e "${GREEN}   ‚úÖ Accessible${NC}" | tee -a "$TEST_LOG"
        else
            echo -e "${RED}   ‚ùå Not accessible${NC}" | tee -a "$TEST_LOG"
            echo '{"error": "URL not accessible", "url": "'$url'", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
        fi
    done
fi

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 3. API ENDPOINT TESTING
# =============================================================================

echo -e "${BLUE}3Ô∏è‚É£ API Endpoint Testing${NC}" | tee -a "$TEST_LOG"
echo "========================" | tee -a "$TEST_LOG"

# Test API endpoints
API_BASE="http://localhost:5000"
ENDPOINTS=(
    "GET /api/health"
    "POST /api/auth/login"
    "GET /api/forms"
    "GET /api/workflows"
    "GET /api/processes"
    "GET /api/tasks"
)

# Login token al
LOGIN_RESPONSE=$(curl -s -X POST "$API_BASE/api/auth/login" \
  -H "Content-Type: application/json" \
  -H "X-Tenant-Id: demo.local" \
  -d '{"email":"admin@demo.local","password":"Passw0rd!"}' 2>/dev/null || echo '{}')

TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"accessToken":"[^"]*"' | cut -d'"' -f4 || echo "")

if [[ -n "$TOKEN" ]]; then
    echo -e "${GREEN}‚úÖ Got auth token${NC}" | tee -a "$TEST_LOG"
    AUTH_HEADER="Authorization: Bearer $TOKEN"
else
    echo -e "${RED}‚ùå Failed to get auth token${NC}" | tee -a "$TEST_LOG"
    AUTH_HEADER=""
    echo '{"error": "Failed to authenticate", "endpoint": "/api/auth/login", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
fi

# Test each endpoint
for endpoint in "${ENDPOINTS[@]}"; do
    method=$(echo "$endpoint" | cut -d' ' -f1)
    path=$(echo "$endpoint" | cut -d' ' -f2)
    
    echo -e "üîç Testing: $method $path" | tee -a "$TEST_LOG"
    
    if [[ "$method" == "GET" ]]; then
        if [[ -n "$AUTH_HEADER" ]]; then
            response=$(curl -s -w "%{http_code}" "$API_BASE$path" \
              -H "$AUTH_HEADER" \
              -H "X-Tenant-Id: demo.local" 2>/dev/null || echo "000")
        else
            response=$(curl -s -w "%{http_code}" "$API_BASE$path" 2>/dev/null || echo "000")
        fi
        
        status_code="${response: -3}"
        
        if [[ "$status_code" =~ ^[23] ]]; then
            echo -e "${GREEN}   ‚úÖ $status_code${NC}" | tee -a "$TEST_LOG"
        else
            echo -e "${RED}   ‚ùå $status_code${NC}" | tee -a "$TEST_LOG"
            echo '{"error": "API endpoint failed", "method": "'$method'", "path": "'$path'", "status": '$status_code', "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
        fi
    fi
done

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 4. LOG FILE ANALYSIS
# =============================================================================

echo -e "${BLUE}4Ô∏è‚É£ Log File Analysis${NC}" | tee -a "$TEST_LOG"
echo "====================" | tee -a "$TEST_LOG"

# Backend log dosyalarƒ±nƒ± ara
BACKEND_LOGS=(
    "../server.log"
    "../app.log" 
    "../combined.log"
    "../error.log"
    "../logs/app.log"
)

for logfile in "${BACKEND_LOGS[@]}"; do
    if [[ -f "$logfile" ]]; then
        echo -e "üìÑ Analyzing: $logfile" | tee -a "$TEST_LOG"
        
        # Son 100 satƒ±rdan error'larƒ± ara
        tail -100 "$logfile" | grep -i "error\|exception\|fail" | while read line; do
            echo "   üî• $line" | tee -a "$TEST_LOG"
            echo '{"error": "Backend log error", "message": "'$line'", "file": "'$logfile'", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"}' >> "$ERROR_LOG"
        done
    fi
done

echo "" | tee -a "$TEST_LOG"

# =============================================================================
# 5. REPLIT AGENT PROMPT GENERATION
# =============================================================================

echo -e "${BLUE}5Ô∏è‚É£ Replit Agent Prompt Generation${NC}" | tee -a "$TEST_LOG"
echo "=================================" | tee -a "$TEST_LOG"

# Error sayƒ±sƒ±nƒ± hesapla
ERROR_COUNT=0
if [[ -f "$ERROR_LOG" ]]; then
    ERROR_COUNT=$(grep -c '^{' "$ERROR_LOG" 2>/dev/null || echo 0)
fi

echo -e "üìä Total errors found: $ERROR_COUNT" | tee -a "$TEST_LOG"

if [[ "$ERROR_COUNT" -gt 0 ]]; then
    echo -e "${YELLOW}‚ö° Generating Replit Agent prompt...${NC}" | tee -a "$TEST_LOG"
    
    cat > "$PROMPT_FILE" << EOF
# Flowner Alpha Test - Hata D√ºzeltme G√∂revi

## Test √ñzeti
- **Test Session**: $TEST_SESSION
- **Test Tarihi**: $(date)
- **Bulunan Hata Sayƒ±sƒ±**: $ERROR_COUNT
- **Backend Status**: $BACKEND_STATUS
- **Architecture**: $ARCHITECTURE

## Tespit Edilen Hatalar

\`\`\`json
$(cat "$ERROR_LOG" 2>/dev/null || echo '[]')
\`\`\`

## Test Detaylarƒ±

### üîß Sistem Yapƒ±landƒ±rmasƒ±
- **Backend API**: http://localhost:5000
- **Admin Interface**: $ADMIN_BASE_URL
- **Portal Interface**: $PORTAL_BASE_URL
- **Architecture**: $ARCHITECTURE (${ADMIN_BASE_URL} & ${PORTAL_BASE_URL})

### üë• Test Edilen Kullanƒ±cƒ±lar
1. **Admin**: admin@demo.local / Passw0rd!
   - Expected redirect: /admin/dashboard
   - Test menus: dashboard, forms, workflows, processes, tenants, users

2. **Designer**: designer@demo.local / Designer123!
   - Expected redirect: /admin/dashboard  
   - Test menus: dashboard, forms, workflows, processes

3. **User**: user@demo.local / User123!
   - Expected redirect: /portal/tasks
   - Test menus: tasks, my-processes, profile

### üåê Browser Test Results
$(if [[ -f "test_summary.json" ]]; then
    echo "- **Users tested**: $(grep -o '"successfulUsers":[0-9]*' test_summary.json | cut -d':' -f2)/$(grep -o '"totalUsers":[0-9]*' test_summary.json | cut -d':' -f2)"
    echo "- **Tests passed**: $(grep -o '"successfulTests":[0-9]*' test_summary.json | cut -d':' -f2)/$(grep -o '"totalTests":[0-9]*' test_summary.json | cut -d':' -f2)"
    echo "- **Critical errors**: $(grep -o '"criticalErrors":[0-9]*' test_summary.json | cut -d':' -f2)"
else
    echo "- Browser tests not available (install Playwright)"
fi)

### üîó API Test Results
- **Health Check**: $(if curl -s http://localhost:5000/api/health > /dev/null 2>&1; then echo "‚úÖ PASS"; else echo "‚ùå FAIL"; fi)
- **Authentication**: $(if [[ -n "$TOKEN" ]]; then echo "‚úÖ PASS"; else echo "‚ùå FAIL"; fi)
- **Multi-user Auth**: $(if grep -q "admin.*designer.*user" "$TEST_LOG" 2>/dev/null; then echo "‚úÖ PASS"; else echo "‚ö†Ô∏è PARTIAL"; fi)

## G√∂rev
Yukarƒ±daki hatalarƒ± analiz et ve d√ºzelt. √ñzellikle:

1. **üî• Kritik Hatalar**:
   - Backend API √ßalƒ±≈ümƒ±yor (port 5000)
   - Authentication ba≈üarƒ±sƒ±z 
   - Database connection sorunlarƒ±

2. **‚ö†Ô∏è √ñnemli Hatalar**:
   - Frontend JavaScript hatalarƒ±
   - Login/logout akƒ±≈ü sorunlarƒ±
   - Menu navigation hatalarƒ±
   - Role-based redirect sorunlarƒ±

3. **üìã Test Edilecek Senaryolar**:
   - Her 3 kullanƒ±cƒ± ile login
   - Role-based menu eri≈üimi
   - Admin: tenant/user management
   - Designer: form/workflow creation
   - User: task completion flow

4. **üîß Architecture Check**:
   - Unified vs Split frontend architecture
   - Port 5000 vs 5174/5175 configuration
   - Cross-origin request handling

## √ñncelik Sƒ±rasƒ±
1. üî• **Backend Health**: API server √ßalƒ±≈ümasƒ± kritik
2. üî• **Authentication**: 3 kullanƒ±cƒ± login akƒ±≈üƒ±
3. ‚ö†Ô∏è **Frontend Render**: Sayfa y√ºkleme ve JavaScript
4. ‚ö†Ô∏è **Navigation**: Menu tƒ±klama ve y√∂nlendirme
5. üìù **UI/UX**: Console warning'leri ve minor bugs

## Test Doƒürulama
D√ºzeltmelerden sonra ≈üu komutu √ßalƒ±≈ütƒ±r:
\`\`\`bash
./alpha_test_system.sh
\`\`\`

**Ba≈üarƒ± Kriterleri**:
- ‚úÖ Backend health check ge√ßiyor
- ‚úÖ 3 kullanƒ±cƒ± da ba≈üarƒ±yla login oluyor
- ‚úÖ Role-based redirect √ßalƒ±≈üƒ±yor (admin‚Üí/admin/dashboard, user‚Üí/portal/tasks)
- ‚úÖ Temel men√º navigation √ßalƒ±≈üƒ±yor
- ‚úÖ API endpoint'leri 200/201 d√∂n√ºyor
- ‚úÖ JavaScript console'da kritik hata yok
- ‚úÖ Playwright testleri ge√ßiyor (eƒüer kuruluysa)

## Debug Info
- **Log files**: $LOG_DIR/
- **Screenshots**: login_*.png, menu_*.png (eƒüer Playwright kuruluysa)
- **Detailed logs**: $TEST_LOG
- **Error JSON**: $ERROR_LOG

Hatalarƒ± d√ºzelt ve test sonu√ßlarƒ±nƒ± payla≈ü!
EOF

    echo -e "${GREEN}‚úÖ Prompt generated: $PROMPT_FILE${NC}" | tee -a "$TEST_LOG"
    echo -e "${BLUE}üìã You can now copy this prompt to Replit Agent:${NC}"
    echo ""
    cat "$PROMPT_FILE"
    
else
    echo -e "${GREEN}üéâ No errors found! System is working correctly.${NC}" | tee -a "$TEST_LOG"
    
    cat > "$PROMPT_FILE" << EOF
# Flowner Alpha Test - Ba≈üarƒ±lƒ±! ‚úÖ

## Test √ñzeti
- **Test Session**: $TEST_SESSION
- **Test Tarihi**: $(date)
- **Bulunan Hata Sayƒ±sƒ±**: 0
- **Sistem Durumu**: T√ºm testler ge√ßti!

## Sonu√ß
Flowner platformu alfa test a≈üamasƒ±nƒ± ba≈üarƒ±yla ge√ßti. T√ºm temel √∂zellikler √ßalƒ±≈üƒ±yor:

- ‚úÖ Backend API'leri responsive
- ‚úÖ Authentication akƒ±≈üƒ± sorunsuz
- ‚úÖ Admin panel eri≈üilebilir
- ‚úÖ User portal √ßalƒ±≈üƒ±yor
- ‚úÖ Database baƒülantƒ±sƒ± OK

## Sonraki Adƒ±mlar
1. **Beta Test**: Ger√ßek kullanƒ±cƒ± senaryolarƒ±
2. **Performance Test**: Y√ºk testi
3. **Security Test**: G√ºvenlik a√ßƒ±ƒüƒ± taramasƒ±
4. **Production Deploy**: Canlƒ± ortam hazƒ±rlƒ±ƒüƒ±

M√ºkemmel i≈ü! üöÄ
EOF
fi

echo ""
echo -e "${BLUE}üìÅ Test files saved to: $LOG_DIR/${NC}"
echo -e "${BLUE}üìù Session log: $TEST_LOG${NC}"
echo -e "${BLUE}üìã Replit prompt: $PROMPT_FILE${NC}"

if [[ "$ERROR_COUNT" -gt 0 ]]; then
    echo -e "${RED}üî• Errors found: $ERROR_COUNT${NC}"
    exit 1
else
    echo -e "${GREEN}üéâ All tests passed!${NC}"
    exit 0
fi