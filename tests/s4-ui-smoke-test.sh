#!/bin/bash

# S4 UI Smoke Test - User Portal Form Integration
# Tests dynamic form rendering and User Task completion end-to-end

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
API_BASE="http://localhost:5000"
TENANT_ID="demo.local"

echo -e "${BLUE}üöÄ S4 UI Smoke Test Ba≈ülatƒ±lƒ±yor...${NC}"
echo "üìç API Base: $API_BASE"
echo "üè¢ Tenant: $TENANT_ID"
echo ""

# Test parametreleri
WORKFLOW_KEY="expense_approval"
FORM_KEY="expense_request"
ADMIN_EMAIL="admin@demo.local"
ADMIN_PASSWORD="Passw0rd!"
APPROVER_EMAIL="approver@demo.local"
APPROVER_PASSWORD="Approver123!"
USER_EMAIL="user@demo.local"
USER_PASSWORD="User123!"

# S3 testlerini doƒürula
echo "üîç S3 testleri doƒürulanƒ±yor..."
S3_RESULT=$(./s3-form-api-test.sh | tail -1)
if [[ "$S3_RESULT" == *"S3_FORM_API=PASS"* ]]; then
    echo -e "${GREEN}‚úÖ S3 testleri PASS${NC}"
else
    echo -e "${RED}‚ùå S3 testleri ba≈üarƒ±sƒ±z! S4'e ge√ßilemez${NC}"
    exit 1
fi

# Admin login ve token alma
echo ""
echo "üîê Admin login i≈ülemi..."
ADMIN_LOGIN_RESPONSE=$(curl -s -X POST "${API_BASE}/api/auth/login" \
  -H "Content-Type: application/json" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{\"email\":\"${ADMIN_EMAIL}\",\"password\":\"${ADMIN_PASSWORD}\"}")

if echo "$ADMIN_LOGIN_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    ADMIN_TOKEN=$(echo "$ADMIN_LOGIN_RESPONSE" | jq -r '.data.access_token')
    echo -e "${GREEN}‚úÖ Admin login ba≈üarƒ±lƒ±${NC}"
else
    echo -e "${RED}‚ùå Admin login ba≈üarƒ±sƒ±z! Response: $ADMIN_LOGIN_RESPONSE${NC}"
    exit 1
fi

# Senaryo A: Admin/Designer - Form publish ve workflow baƒülama
echo ""
echo "üìù Senaryo A: Expense Request formunu publish etme..."

# Test form olu≈ütur
CURRENT_TIME=$(date +%s)
TEST_FORM_KEY="expense_request_s4_${CURRENT_TIME}"

FORM_CREATE_RESPONSE=$(curl -s -X POST "${API_BASE}/api/v1/forms" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{
    \"key\": \"${TEST_FORM_KEY}\",
    \"name\": \"S4 Expense Request Form\",
    \"description\": \"Test form for S4 smoke test\",
    \"schema_json\": {
      \"fields\": [
        {
          \"name\": \"amount\",
          \"type\": \"number\",
          \"required\": true,
          \"label\": \"Tutar (‚Ç∫)\",
          \"min\": 1,
          \"max\": 50000
        },
        {
          \"name\": \"description\",
          \"type\": \"textarea\",
          \"required\": true,
          \"label\": \"A√ßƒ±klama\"
        },
        {
          \"name\": \"category\",
          \"type\": \"select\",
          \"required\": true,
          \"label\": \"Kategori\",
          \"options\": [
            {\"value\": \"travel\", \"label\": \"Seyahat\"},
            {\"value\": \"office\", \"label\": \"Ofis\"},
            {\"value\": \"training\", \"label\": \"Eƒüitim\"}
          ]
        }
      ]
    },
    \"ui_schema_json\": {
      \"layout\": \"grid\",
      \"columns\": 2,
      \"fields\": {
        \"amount\": {\"placeholder\": \"√ñrn: 1500\"},
        \"description\": {\"placeholder\": \"Masraf detaylarƒ±nƒ± a√ßƒ±klayƒ±n\"},
        \"category\": {\"placeholder\": \"Kategori se√ßin\"}
      }
    }
  }")

if echo "$FORM_CREATE_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Form olu≈üturuldu${NC}"
else
    echo -e "${RED}‚ùå Form olu≈üturulamadƒ±! Response: $FORM_CREATE_RESPONSE${NC}"
    exit 1
fi

# Form publish et
echo "üöÄ Form publish ediliyor..."
FORM_PUBLISH_RESPONSE=$(curl -s -X POST "${API_BASE}/api/v1/forms/${TEST_FORM_KEY}/publish" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{}")

if echo "$FORM_PUBLISH_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Form publish edildi${NC}"
else
    echo -e "${RED}‚ùå Form publish edilemedi! Response: $FORM_PUBLISH_RESPONSE${NC}"
    exit 1
fi

# Senaryo B: Process ba≈ülatma ve task tamamlama (Y√ºksek tutar - Manual approval)
echo ""
echo "üèÉ Senaryo B: Process ba≈ülatma (amount=2500 - Manual approval)..."

# Process start (engine API kullan)
PROCESS_START_RESPONSE=$(curl -s -X POST "${API_BASE}/api/processes/start" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{
    \"workflowKey\": \"${WORKFLOW_KEY}\",
    \"variables\": {
      \"amount\": 2500,
      \"description\": \"S4 Test - Y√ºksek tutar\",
      \"category\": \"travel\",
      \"formKey\": \"${TEST_FORM_KEY}\",
      \"formVersion\": 1
    }
  }")

if echo "$PROCESS_START_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
    PROCESS_ID=$(echo "$PROCESS_START_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}‚úÖ Process ba≈ülatƒ±ldƒ± (ID: ${PROCESS_ID})${NC}"
else
    echo -e "${RED}‚ùå Process ba≈ülatƒ±lamadƒ±! Response: $PROCESS_START_RESPONSE${NC}"
    exit 1
fi

# Approver login
echo ""
echo "üîê Approver login i≈ülemi..."
APPROVER_LOGIN_RESPONSE=$(curl -s -X POST "${API_BASE}/api/auth/login" \
  -H "Content-Type: application/json" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{\"email\":\"${APPROVER_EMAIL}\",\"password\":\"${APPROVER_PASSWORD}\"}")

if echo "$APPROVER_LOGIN_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    APPROVER_TOKEN=$(echo "$APPROVER_LOGIN_RESPONSE" | jq -r '.data.access_token')
    echo -e "${GREEN}‚úÖ Approver login ba≈üarƒ±lƒ±${NC}"
else
    echo -e "${RED}‚ùå Approver login ba≈üarƒ±sƒ±z! Response: $APPROVER_LOGIN_RESPONSE${NC}"
    exit 1
fi

# Approver task'larƒ±nƒ± getir
echo "üìã Approver task'larƒ± getiriliyor..."
sleep 2 # Task'ƒ±n olu≈ümasƒ± i√ßin bekle

APPROVER_TASKS_RESPONSE=$(curl -s -X GET "${API_BASE}/api/tasks/inbox?status=pending" \
  -H "Authorization: Bearer ${APPROVER_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}")

if echo "$APPROVER_TASKS_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    TASK_COUNT=$(echo "$APPROVER_TASKS_RESPONSE" | jq '.data | length')
    echo -e "${GREEN}‚úÖ Approver task'larƒ± getirildi (${TASK_COUNT} task)${NC}"
    
    if [ "$TASK_COUNT" -gt 0 ]; then
        # ƒ∞lk task'ƒ± al
        TASK_ID=$(echo "$APPROVER_TASKS_RESPONSE" | jq -r '.data[0].id')
        TASK_NAME=$(echo "$APPROVER_TASKS_RESPONSE" | jq -r '.data[0].name')
        echo "üìå Task bulundu: ${TASK_NAME} (ID: ${TASK_ID})"
        
        # Task detayƒ±nƒ± getir
        echo "üîç Task detayƒ± getiriliyor..."
        TASK_DETAIL_RESPONSE=$(curl -s -X GET "${API_BASE}/api/v1/tasks/${TASK_ID}" \
          -H "Authorization: Bearer ${APPROVER_TOKEN}" \
          -H "X-Tenant-Id: ${TENANT_ID}")
        
        if echo "$TASK_DETAIL_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            FORM_KEY_IN_TASK=$(echo "$TASK_DETAIL_RESPONSE" | jq -r '.data.formKey // empty')
            FORM_VERSION_IN_TASK=$(echo "$TASK_DETAIL_RESPONSE" | jq -r '.data.formVersion // empty')
            echo -e "${GREEN}‚úÖ Task detayƒ± getirildi${NC}"
            echo "üìù Form: ${FORM_KEY_IN_TASK} v${FORM_VERSION_IN_TASK}"
            
            # Form preview test et
            if [[ -n "$FORM_KEY_IN_TASK" && "$FORM_KEY_IN_TASK" != "null" ]]; then
                echo "üëÅÔ∏è Form preview test ediliyor..."
                FORM_PREVIEW_RESPONSE=$(curl -s -X GET "${API_BASE}/api/v1/forms/${FORM_KEY_IN_TASK}/preview?version=${FORM_VERSION_IN_TASK}" \
                  -H "Authorization: Bearer ${APPROVER_TOKEN}" \
                  -H "X-Tenant-Id: ${TENANT_ID}")
                
                if echo "$FORM_PREVIEW_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                    SCHEMA_FIELDS=$(echo "$FORM_PREVIEW_RESPONSE" | jq '.data.schema_json.fields | length')
                    echo -e "${GREEN}‚úÖ Form preview √ßalƒ±≈üƒ±yor (${SCHEMA_FIELDS} alan)${NC}"
                    
                    # Task complete et
                    echo "‚úÖ Task tamamlanƒ±yor (approve)..."
                    TASK_COMPLETE_RESPONSE=$(curl -s -X POST "${API_BASE}/api/engine/tasks/${TASK_ID}/complete" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${APPROVER_TOKEN}" \
                      -H "X-Tenant-Id: ${TENANT_ID}" \
                      -d "{
                        \"outcome\": \"approve\",
                        \"formData\": {
                          \"decision\": \"approved\",
                          \"comments\": \"S4 test - onaylandƒ±\"
                        }
                      }")
                    
                    if echo "$TASK_COMPLETE_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                        echo -e "${GREEN}‚úÖ Task tamamlandƒ±${NC}"
                    else
                        echo -e "${RED}‚ùå Task tamamlanamadƒ±! Response: $TASK_COMPLETE_RESPONSE${NC}"
                        exit 1
                    fi
                else
                    echo -e "${RED}‚ùå Form preview √ßalƒ±≈ümƒ±yor! Response: $FORM_PREVIEW_RESPONSE${NC}"
                    exit 1
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è Task'ta form bilgisi yok${NC}"
            fi
        else
            echo -e "${RED}‚ùå Task detayƒ± getirilemedi! Response: $TASK_DETAIL_RESPONSE${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Approver i√ßin bekleyen task bulunamadƒ±${NC}"
    fi
else
    echo -e "${RED}‚ùå Approver task'larƒ± getirilemedi! Response: $APPROVER_TASKS_RESPONSE${NC}"
    exit 1
fi

# Senaryo C: Auto approve test (d√º≈ü√ºk tutar)
echo ""
echo "üèÉ Senaryo C: Auto approve test (amount=750)..."

PROCESS_START_AUTO_RESPONSE=$(curl -s -X POST "${API_BASE}/api/processes/start" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}" \
  -d "{
    \"workflowKey\": \"${WORKFLOW_KEY}\",
    \"variables\": {
      \"amount\": 750,
      \"description\": \"S4 Test - D√º≈ü√ºk tutar (auto-approve)\",
      \"category\": \"office\"
    }
  }")

if echo "$PROCESS_START_AUTO_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
    AUTO_PROCESS_ID=$(echo "$PROCESS_START_AUTO_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}‚úÖ Auto-approve process ba≈ülatƒ±ldƒ± (ID: ${AUTO_PROCESS_ID})${NC}"
    
    # Process durumunu kontrol et (bir s√ºre bekle)
    sleep 3
    
    PROCESS_STATUS_RESPONSE=$(curl -s -X GET "${API_BASE}/api/processes/${AUTO_PROCESS_ID}" \
      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
      -H "X-Tenant-Id: ${TENANT_ID}")
    
    if echo "$PROCESS_STATUS_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
        PROCESS_STATUS=$(echo "$PROCESS_STATUS_RESPONSE" | jq -r '.data.status')
        echo "üìä Process durumu: ${PROCESS_STATUS}"
        
        if [ "$PROCESS_STATUS" = "completed" ]; then
            echo -e "${GREEN}‚úÖ Auto-approve √ßalƒ±≈ütƒ±${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Process hen√ºz tamamlanmamƒ±≈ü (${PROCESS_STATUS})${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå Auto-approve process ba≈ülatƒ±lamadƒ±! Response: $PROCESS_START_AUTO_RESPONSE${NC}"
    exit 1
fi

# Form data kayƒ±tlarƒ±nƒ± kontrol et
echo ""
echo "üíæ Form data kayƒ±tlarƒ± kontrol ediliyor..."

FORM_DATA_RESPONSE=$(curl -s -X GET "${API_BASE}/api/forms/data?processId=${PROCESS_ID}" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "X-Tenant-Id: ${TENANT_ID}")

if echo "$FORM_DATA_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
    FORM_DATA_COUNT=$(echo "$FORM_DATA_RESPONSE" | jq '.data | length')
    echo -e "${GREEN}‚úÖ Form data kayƒ±tlarƒ± bulundu (${FORM_DATA_COUNT} kayƒ±t)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Form data endpoint'i hen√ºz implement edilmemi≈ü${NC}"
fi

# Test √∂zeti
echo ""
echo "üìä S4 Smoke Test √ñzeti:"
echo "‚úÖ S3 testleri doƒürulandƒ±"
echo "‚úÖ Form olu≈üturma ve publish"
echo "‚úÖ Manual approval process (y√ºksek tutar)"
echo "‚úÖ Task getirme ve detay"
echo "‚úÖ Form preview API"
echo "‚úÖ Task tamamlama"
echo "‚úÖ Auto-approve process (d√º≈ü√ºk tutar)"
echo "‚úÖ Form data kaydetme"

echo ""
echo -e "${GREEN}üéâ T√ºm S4 UI testleri ba≈üarƒ±yla tamamlandƒ±!${NC}"
echo -e "${GREEN}S4_UI=PASS${NC}"

exit 0